{"version":3,"file":"static/js/128.7a6c2d70.chunk.js","mappings":"uLAyJA,MACA,EAD2B,IA5H3B,MAIUA,4BAAAA,CAA6BC,GACnC,OAAKA,EAEDA,EAAQC,WAAW,KACd,IAAMD,EAAQE,UAAU,GAE1BF,EALc,EAMvB,CAEQG,cAAAA,GACN,MAAMC,EAAQC,aAAaC,QAAQ,cAC7BC,EAAuB,CAC3B,eAAgB,oBAOlB,OAJIH,IACFG,EAAuB,cAAC,UAAAC,OAAaJ,IAGhCG,CACT,CAKA,+BAAME,CAA0BT,GAC9B,IAAKA,EACH,MAAM,IAAIU,MAAM,wBAGlB,IAEE,MAAMC,EAAaC,EAAAA,EAAOC,aAEpBC,QAAiBC,MAAM,GAADP,OAAIG,EAAU,0BAAAH,OAAyBR,GAAW,CAC5EgB,OAAQ,MACRT,QAASU,KAAKd,mBAGhB,IAAKW,EAASI,GAAI,CAChB,MAAMC,QAAkBL,EAASM,OAEjC,MADAC,QAAQC,MAAM,kBAAmBH,GAC3B,IAAIT,MAAM,uBAADF,OAAwBM,EAASS,QAClD,CAGA,aADwCT,EAASU,MAEnD,CAAE,MAAOF,GAEP,MADAD,QAAQC,MAAM,8BAA+BA,GACvCA,CACR,CACF,CAMAG,gBAAAA,CAAiBC,GACf,IAAKA,EAAa,OAAO,KAEzB,IAEE,MAAMC,EAAO,IAAIC,KAAKF,GACtB,GAAIG,MAAMF,EAAKG,WACb,OAAO,KAGT,MAAMC,EAAOJ,EAAKK,cACZC,EAAQC,OAAOP,EAAKQ,WAAa,GAAGC,SAAS,EAAG,KAChDC,EAAMH,OAAOP,EAAKW,WAAWF,SAAS,EAAG,KAC/C,MAAM,GAAN5B,OAAUuB,EAAI,KAAAvB,OAAIyB,EAAK,KAAAzB,OAAI6B,EAC7B,CAAE,MAAOf,GAEP,OADAD,QAAQC,MAAM,sBAAuBA,GAC9B,IACT,CACF,CAMAiB,WAAAA,CAAYC,EAAeC,GACzB,IAAKD,IAAUC,EAEb,OADApB,QAAQqB,IAAI,iDAADlC,OAAwCgC,EAAK,YAAAhC,OAAWiC,KAC5D,EAIT,MAAME,EAAK,IAAIf,KAAKY,GACdI,EAAK,IAAIhB,KAAKa,GAGpB,GAAIZ,MAAMc,EAAGb,WAEX,OADAT,QAAQC,MAAM,kCAADd,OAA8BgC,KACpC,EAET,GAAIX,MAAMe,EAAGd,WAEX,OADAT,QAAQC,MAAM,kCAADd,OAA8BiC,KACpC,EAGT,MAAMI,EAASF,EAAGb,UAAYc,EAAGd,UAEjC,OADAT,QAAQqB,IAAI,mCAADlC,OAA0BgC,EAAK,MAAAhC,OAAKmC,EAAGb,UAAS,QAAAtB,OAAOiC,EAAK,MAAAjC,OAAKoC,EAAGd,UAAS,QAAAtB,OAAOqC,IACxFA,CACT,CAMAC,wBAAAA,CAAyBC,GACvB,IAAKA,IAAwBA,EAAoBC,MAA4C,IAApCD,EAAoBC,KAAKC,OAChF,OAAO,KAGT,MAAMC,EAAmBH,EAAoBC,KAAK,GAClD,OAAO/B,KAAKQ,iBAAiByB,EAAiBC,YAChD,E","sources":["services/transactionService.ts"],"sourcesContent":["import { CONFIG } from '../config';\r\n\r\ninterface TransactionResponse {\r\n  draw: number;\r\n  recordsFiltered: number;\r\n  recordsTotal: number;\r\n  data: Transaction[];\r\n}\r\n\r\ninterface Transaction {\r\n  Id: string;\r\n  status: string;\r\n  createAt: string;\r\n  createBy: string;\r\n  order: string;\r\n  type: string;\r\n  paymentNote: string;\r\n  updateNote: string | null;\r\n  amount: number;\r\n  Card_id: string;\r\n  bankName: string;\r\n  cardNumber: string;\r\n  responeText: string;\r\n  invoice_date: string | null;\r\n  noty: string | null;\r\n  order_pending: boolean;\r\n  CreateAtStr: string;\r\n}\r\n\r\nclass TransactionService {\r\n  /**\r\n   * Chuy·ªÉn ƒë·ªïi Store ID t·ª´ d·∫°ng S04314 sang A04314 (b·ªè S, thay b·∫±ng A)\r\n   */\r\n  private convertStoreIdToCustomerCode(storeId: string): string {\r\n    if (!storeId) return '';\r\n    // N·∫øu b·∫Øt ƒë·∫ßu b·∫±ng S, thay b·∫±ng A\r\n    if (storeId.startsWith('S')) {\r\n      return 'A' + storeId.substring(1);\r\n    }\r\n    return storeId;\r\n  }\r\n\r\n  private getAuthHeaders(): HeadersInit {\r\n    const token = localStorage.getItem('auth_token');\r\n    const headers: HeadersInit = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n    \r\n    if (token) {\r\n      headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    \r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * G·ªçi API ƒë·ªÉ l·∫•y transaction theo Store Code qua backend proxy\r\n   */\r\n  async getTransactionByStoreCode(storeId: string): Promise<TransactionResponse | null> {\r\n    if (!storeId) {\r\n      throw new Error('Store ID is required');\r\n    }\r\n\r\n    try {\r\n      // G·ªçi API qua backend proxy ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ CORS v√† cookie\r\n      const backendUrl = CONFIG.API_BASE_URL;\r\n      \r\n      const response = await fetch(`${backendUrl}/api/ims/transactions/${storeId}`, {\r\n        method: 'GET',\r\n        headers: this.getAuthHeaders(),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Response error:', errorText);\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data: TransactionResponse = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching transaction:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse date string t·ª´ CreateAtStr (format: \"Oct 13, 2025 10:19 AM\")\r\n   * Chuy·ªÉn ƒë·ªïi sang YYYY-MM-DD\r\n   */\r\n  parseCreateAtStr(createAtStr: string): string | null {\r\n    if (!createAtStr) return null;\r\n    \r\n    try {\r\n      // Parse date string nh∆∞ \"Oct 13, 2025 10:19 AM\"\r\n      const date = new Date(createAtStr);\r\n      if (isNaN(date.getTime())) {\r\n        return null;\r\n      }\r\n      // Chuy·ªÉn ƒë·ªïi sang YYYY-MM-DD\r\n      const year = date.getFullYear();\r\n      const month = String(date.getMonth() + 1).padStart(2, '0');\r\n      const day = String(date.getDate()).padStart(2, '0');\r\n      return `${year}-${month}-${day}`;\r\n    } catch (error) {\r\n      console.error('Error parsing date:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * So s√°nh hai date strings (YYYY-MM-DD)\r\n   * Tr·∫£ v·ªÅ true n·∫øu date1 m·ªõi h∆°n date2\r\n   */\r\n  isDateNewer(date1: string, date2: string): boolean {\r\n    if (!date1 || !date2) {\r\n      console.log(`  ‚ö†Ô∏è  Date comparison failed: date1=${date1}, date2=${date2}`);\r\n      return false;\r\n    }\r\n    \r\n    // Parse dates - handle different formats\r\n    const d1 = new Date(date1);\r\n    const d2 = new Date(date2);\r\n    \r\n    // If parsing failed, try alternative formats\r\n    if (isNaN(d1.getTime())) {\r\n      console.error(`  ‚ùå Invalid date1 format: ${date1}`);\r\n      return false;\r\n    }\r\n    if (isNaN(d2.getTime())) {\r\n      console.error(`  ‚ùå Invalid date2 format: ${date2}`);\r\n      return false;\r\n    }\r\n    \r\n    const result = d1.getTime() > d2.getTime();\r\n    console.log(`  üìä Date comparison: ${date1} (${d1.getTime()}) > ${date2} (${d2.getTime()}) = ${result}`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * L·∫•y CreateAtStr t·ª´ transaction ƒë·∫ßu ti√™n (n·∫øu c√≥)\r\n   * Tr·∫£ v·ªÅ date string YYYY-MM-DD ho·∫∑c null\r\n   */\r\n  getLatestTransactionDate(transactionResponse: TransactionResponse | null): string | null {\r\n    if (!transactionResponse || !transactionResponse.data || transactionResponse.data.length === 0) {\r\n      return null;\r\n    }\r\n    \r\n    const firstTransaction = transactionResponse.data[0];\r\n    return this.parseCreateAtStr(firstTransaction.CreateAtStr);\r\n  }\r\n}\r\n\r\nconst transactionService = new TransactionService();\r\nexport default transactionService;\r\n\r\n"],"names":["convertStoreIdToCustomerCode","storeId","startsWith","substring","getAuthHeaders","token","localStorage","getItem","headers","concat","getTransactionByStoreCode","Error","backendUrl","CONFIG","API_BASE_URL","response","fetch","method","this","ok","errorText","text","console","error","status","json","parseCreateAtStr","createAtStr","date","Date","isNaN","getTime","year","getFullYear","month","String","getMonth","padStart","day","getDate","isDateNewer","date1","date2","log","d1","d2","result","getLatestTransactionDate","transactionResponse","data","length","firstTransaction","CreateAtStr"],"sourceRoot":""}